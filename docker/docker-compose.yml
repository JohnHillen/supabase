version: '3.8'

services:
  db:
    image: supabase/postgres:15.2.0
    container_name: supabase-db
    restart: always
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_PORT: ${POSTGRES_PORT}
    volumes:
      - db-data:/var/lib/postgresql/data
    ports:
      - "${POSTGRES_PORT}:${POSTGRES_PORT}"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 5s
      timeout: 5s
      retries: 5

  supavisor:
    image: supabase/supavisor:latest
    container_name: supabase-supavisor
    restart: always
    environment:
      PORT: ${SUPAVISOR_PORT}
      DATABASE_URL: "postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:${POSTGRES_PORT}/${POSTGRES_DB}"
      JWT_SECRET: ${JWT_SECRET}
    depends_on:
      - db
    ports:
      - "${SUPAVISOR_PORT}:${SUPAVISOR_PORT}"
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:${SUPAVISOR_PORT}/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  kong:
    image: kong:3.4.2
    container_name: supabase-kong
    restart: always
    environment:
      KONG_DATABASE: "off"
      KONG_DECLARATIVE_CONFIG: /kong.yml
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_LOG_LEVEL: notice
      KONG_ADMIN_LISTEN: "0.0.0.0:8001"
    volumes:
      - ./kong.yml:/kong.yml:ro
    ports:
      - "${KONG_HTTP_PORT}:8000"
      - "${KONG_HTTPS_PORT}:8443"
      - "8001:8001"
    depends_on:
      - rest
      - auth
      - storage
      - realtime
      - functions
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 10s
      timeout: 10s
      retries: 5

  rest:
    image: postgrest/postgrest:v10.2.0
    container_name: supabase-rest
    restart: always
    environment:
      PGRST_DB_URI: "postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:${POSTGRES_PORT}/${POSTGRES_DB}"
      PGRST_DB_SCHEMA: "public,storage,graphql_public"
      PGRST_DB_ANON_ROLE: "anon"
      PGRST_JWT_SECRET: ${JWT_SECRET}
      PGRST_DB_EXTRA_SEARCH_PATH: "extensions"
    depends_on:
      - db
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:3000"]
      interval: 10s
      timeout: 5s
      retries: 5

  realtime:
    image: supabase/realtime:v2.12.0
    container_name: supabase-realtime
    restart: always
    environment:
      DB_HOST: db
      DB_PORT: ${POSTGRES_PORT}
      DB_USER: ${POSTGRES_USER}
      DB_PASSWORD: ${POSTGRES_PASSWORD}
      DB_NAME: ${POSTGRES_DB}
      PORT: 4000
      SECURE_CHANNELS: "false"
      JWT_SECRET: ${JWT_SECRET}
      REPLICATION_MODE: "STREAM"
      SUPABASE_REALTIME_DB_SCHEMA: "public"
    depends_on:
      - db
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:4000/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  auth:
    image: supabase/gotrue:v2.60.2
    container_name: supabase-auth
    restart: always
    environment:
      GOTRUE_DB_DRIVER: "postgres"
      GOTRUE_DB_DATABASE_URL: "postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:${POSTGRES_PORT}/${POSTGRES_DB}"
      GOTRUE_SITE_URL: ${SITE_URL}
      GOTRUE_JWT_SECRET: ${JWT_SECRET}
      GOTRUE_DISABLE_SIGNUP: "false"
      GOTRUE_API_HOST: "0.0.0.0"
      GOTRUE_API_PORT: 9999
      GOTRUE_LOG_LEVEL: "INFO"
      GOTRUE_MAILER_AUTOCONFIRM: "true"
      EXTERNAL_EMAIL_ENABLED: "true"
      GOTRUE_SMTP_HOST: ${SMTP_HOST}
      GOTRUE_SMTP_PORT: ${SMTP_PORT}
      GOTRUE_SMTP_USER: ${SMTP_USER}
      GOTRUE_SMTP_PASS: ${SMTP_PASS}
      GOTRUE_SMTP_ADMIN_EMAIL: ${SMTP_ADMIN_EMAIL}
    depends_on:
      - db
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:9999/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  storage:
    image: supabase/storage-api:v0.44.2
    container_name: supabase-storage
    restart: always
    environment:
      ANON_KEY: ${ANON_KEY}
      SERVICE_KEY: ${SERVICE_ROLE_KEY}
      POSTGREST_URL: "http://rest:3000"
      PGRST_JWT_SECRET: ${JWT_SECRET}
      DATABASE_URL: "postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:${POSTGRES_PORT}/${POSTGRES_DB}"
      FILE_SIZE_LIMIT: "52428800"
      STORAGE_BACKEND: "file"
      FILE_STORAGE_BACKEND_PATH: "/var/lib/storage"
    volumes:
      - storage-data:/var/lib/storage
    depends_on:
      - db
      - rest
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:5000/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  functions:
    image: supabase/edge-runtime:v1.10.3
    container_name: supabase-functions
    restart: always
    environment:
      SUPABASE_URL: "http://kong:8000"
      SUPABASE_ANON_KEY: ${ANON_KEY}
    volumes:
      - ./functions:/home/functions
    depends_on:
      - kong
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:9000/functions/v1/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  studio:
    image: supabase/studio:20231027-95c0c40
    container_name: supabase-studio
    restart: always
    environment:
      PORT: 3000
      SUPABASE_URL: "http://kong:8000"
      SUPABASE_KEY: ${ANON_KEY}
      SERVICE_ROLE_KEY: ${SERVICE_ROLE_KEY}
      JWT_SECRET: ${JWT_SECRET}
      PG_META_URL: "http://pgmeta:8080"
      NODE_TLS_REJECT_UNAUTHORIZED: 0
      DASHBOARD_PASSWORD: ${DASHBOARD_PASSWORD}
      DASHBOARD_USERNAME: ${DASHBOARD_USERNAME}
      NEXT_PUBLIC_ENABLE_TELEMETRY: "false"
    depends_on:
      - pgmeta
    ports:
      - "${STUDIO_PORT}:3000"
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:3000"]
      interval: 10s
      timeout: 5s
      retries: 5

  pgmeta:
    image: supabase/postgres-meta:v0.72.0
    container_name: supabase-pgmeta
    restart: always
    environment:
      PG_META_PORT: 8080
      PG_META_DB_HOST: db
      PG_META_DB_PORT: ${POSTGRES_PORT}
      PG_META_DB_NAME: ${POSTGRES_DB}
      PG_META_DB_USER: ${POSTGRES_USER}
      PG_META_DB_PASSWORD: ${POSTGRES_PASSWORD}
    depends_on:
      - db
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:8080/health"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  db-data:
  storage-data:
